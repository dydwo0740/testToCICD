name: Deploy # Workflow 이름.
on: # CICD 이벤트 감지.
  push:
    branches:
      - main # CI/CD를 동작하게 할 브랜치 이름. 즉 master 브랜치에 push가 일어나면 감지하여 다음과 같은 Jobs를 실행한다.
jobs: # CI/CD 세부 동작 (Job) 설정.
  build:
    runs-on: ubuntu-latest # Ubuntu 니까 ubuntu 20.04로 설정.
    steps:
      - name: Checkout source code. # 깃허브 레포지토리 체크.
        uses: actions/checkout@v2
      - name: Check Node v # 노드 버전 확인.
        run: node -v
      - name: Install Dependencies # 설치된 의존성 파일 설치.
        working-directory: ./frontend
        run: yarn install --frozen-lockfile
      - name: Build # 빌드.
        working-directory: ./frontend
        run: yarn build
      - name: zip create # S3에 올릴 zip 파일 생성. (빌드한 프로젝트를 압축)
        run: zip -qq -r ./test-build.zip . # 파일명은 자유, 대신 아래 workflow에 적을 파일명과 동일하게 맞춰줄 것.
        shell: bash
      - name: Configure AWS credentials # aws 인증 확인.
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # 깃허브 레포지토리 Secrets에 등록한 AWS_ACCESS_KEY.
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # 깃허브 레포지토리 Secrets에 등록한 AWS_SECRET_ACCESS_KEY.
          aws-region: ap-northeast-2 # 깃허브 레포지토리 Secrets에 등록한 AWS_REGION.
      #s3,codeDeploy 경로와 이름 알맞게 입력
      - name: upload to S3
        run: aws s3 cp --region ap-northeast-2 ./test-build-zip.zip s3://www.a2cartag.com
      - name: deploy with AWS codeDeploy
        run: aws deploy create-deployment
          --application-name myApplicationToCICD
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name a2Cartag
          --s3-location bucket=www.a2cartag.com,bundleType=zip,key=together-zip.zip
